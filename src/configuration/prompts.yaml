# src\configuration\prompts.yaml

# =====================================
# UNIVERSAL LEGAL DOCUMENT ANALYSIS PROMPTS - MAP-REDUCE
# =====================================
document_analysis:
  summary_map:
    input_variables: ["summary", "document_text"]
    template: |
      Analyze this legal document chunk and extract the essential legal content.
      Write a **clear, concise legal summary** focusing on:
      - Core legal principles, obligations, or rights
      - Key provisions, clauses, or stipulations
      - Critical definitions, conditions, or requirements
      - Omit procedural details, examples, or repetitions unless legally significant
      # - Limit to **100 words min** and  **200 words max**
      - Return strictly as a JSON object: {{ "summary": "your summary text here" }}

      LEGAL DOCUMENT CHUNK:
      {document_text}

  summary_reduce:
    input_variables: ["summary", "chunk_summaries"]
    template: |
      Synthesize these legal document chunk summaries into a **coherent legal summary**.
      - Consolidate legal principles and key provisions
      - Remove redundant information while preserving legal nuance
      - Maintain logical legal structure and hierarchy of concepts
      - Ensure accuracy in representing legal relationships and obligations
      # - Limit to **200 words min** and  **500 words max**
      - Return strictly as a JSON object: {{ "summary": "your consolidated summary here" }}

      CHUNK SUMMARIES:
      {chunk_summaries}

# =====================================
# DOCUMENT COMPARISON PROMPTS
# =====================================
document_comparison:
  compare_docs:
    input_variables: ["doc1_chunk", "doc2_chunk"]
    template: |
      You are an expert reviewer.
      Compare the following two text chunks.
      Identify similarities, differences, and unique insights.
      Keep it concise and structured.

      DOCUMENT 1:
      {doc1_chunk}

      DOCUMENT 2:
      {doc2_chunk}

      STRUCTURED COMPARISON:

  chunk_reduce:
    input_variables: ["chunk_comparisons"]
    template: |
      Aggregate multiple chunk-level comparisons.
      Remove repetition, highlight consistent similarities, and summarize differences.
      Return JSON strictly:
      {{ "similarities": [], "differences": [], "unique_doc1": [], "unique_doc2": [] }}

      CHUNK COMPARISONS:
      {chunk_comparisons}

      REDUCED SUMMARY:

  holistic_compare:
    input_variables: ["doc1_text", "doc2_text"]
    template: |
      Compare these two full documents as a whole.
      Provide:
      - Overall similarities
      - Key differences
      - Critical unique points
      - Potential conflicts or contradictions
      Return JSON strictly:
      {{ "similarities": [], "differences": [], "unique_doc1": [], "unique_doc2": [] }}

      DOCUMENT 1:
      {doc1_text}

      DOCUMENT 2:
      {doc2_text}

# =====================================
# DOCUMENT QA CHAT PROMPTS
# =====================================
document_qa_chat:
  contextualize_question_prompt:
    messages:
      - role: system
        content: |
          Given a conversation history and the most recent user query, rewrite the query as a standalone question
          that makes sense without relying on the previous context. Do not provide an answerâ€”only reformulate the
          question if necessary; otherwise, return it unchanged.
      - role: human
        content: "{input}"

  context_qa_prompt:
    messages:
      - role: system
        content: |
          You are an assistant designed to answer questions using the provided context. Rely only on the retrieved
          information to form your response. If the answer is not found in the context, respond with 'I don't know.'
          Keep your answer concise and no longer than three sentences.

          {context}
      - role: human
        content: "{input}"
